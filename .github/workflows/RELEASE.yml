name: Release a new version

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Semantic version number to use in release: ^[0-9]+.[0-9]+.[0-9]+(-[a-zA-Z0-9.-]+){0,1}$'
        required: true
      prerelease:
        description: 'This release is a pre-release'
        required: true
        type: boolean
        default: false

jobs:
  prepare:
    runs-on: ubuntu-latest

    outputs:
      branch: ${{ steps.release-branch-name.outputs.name }}

    steps:
      - name: Determine release branch name
        id: release-branch-name
        run: |-
          BRANCH=${GITHUB_REF#refs/heads/}
          if [[ ${BRANCH} == stable/* ]] || [[ ${PRERELEASE} ]]; then 
            # use the current branch name (maintenance release or alpha/rc)
            echo "::set-output name=name::${BRANCH}";
          elif [[ ${BRANCH} == "main" ]]; then
            # this is a release, derive a new maintenance branch name
            [[ $VERSION_INPUT =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)(-[a-zA-Z0-9.-]+){0,1}$ ]]
            echo "::set-output name=name::stable/${BASH_REMATCH[1]}.${BASH_REMATCH[2]}";
          else
            # unsupported branch
            echo "Unsupported release branch ${BRANCH}. Please release from main branch or a stable/* branch" && exit 1;
          fi
        env:
          VERSION_INPUT: ${{ github.event.inputs.version }}
          GITHUB_REF: ${{ github.ref }}
          PRERELEASE: ${{ github.event.inputs.prerelease }}
      
      - name: Create maintenance branch
        if: github.ref == 'refs/heads/main' && github.event.inputs.prerelease == 'false'
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/${{ github.repository }}/git/refs
          ref: refs/heads/${{ steps.release-branch-name.outputs.name }}
          sha: ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  release-and-deploy:
    name: Release and deploy artifacts
    runs-on: ubuntu-latest
    needs: [ prepare ]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.prepare.outputs.branch }}

      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v2.4.3
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          exportEnv: false # we rely on step outputs, no need for environment variables
          secrets: |
            secret/data/products/connectors/ci/common ARTIFACTORY_USR;
            secret/data/products/connectors/ci/common ARTIFACTORY_PSW;
            secret/data/github.com/organizations/camunda MAVEN_CENTRAL_DEPLOYMENT_USR;
            secret/data/github.com/organizations/camunda MAVEN_CENTRAL_DEPLOYMENT_PSW;
            secret/data/github.com/organizations/camunda MAVEN_CENTRAL_GPG_SIGNING_KEY_PASSPHRASE;
            secret/data/github.com/organizations/camunda MAVEN_CENTRAL_GPG_SIGNING_KEY_SEC;

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ steps.secrets.outputs.MAVEN_CENTRAL_GPG_SIGNING_KEY_SEC }}
          passphrase: ${{ steps.secrets.outputs.MAVEN_CENTRAL_GPG_SIGNING_KEY_PASSPHRASE }}

      - name: Prepare Java and Maven settings
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Create ~/.m2/settings.xml 
        shell: bash
        run: |
          cat <<EOF > ~/.m2/settings.xml
          <?xml version="1.0" encoding="UTF-8"?>
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">
            <interactiveMode>false</interactiveMode>
            <servers>
              <server>
                <id>camunda-nexus</id>
                <username>\${env.NEXUS_USR}</username>
                <password>\${env.NEXUS_PSW}</password>
              </server>
              <server>
                <id>central</id>
                <username>\${env.MAVEN_USR}</username>
                <password>\${env.MAVEN_PSW}</password>
              </server>
              <server>
                <id>gpg.passphrase</id>
                <passphrase>\${env.MAVEN_GPG_PASSPHRASE}</passphrase>
              </server>
            </servers>
          </settings>
          EOF

      - name: Configure git user
        run: |
          # https://github.com/actions/checkout/issues/13#issuecomment-724415212
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Set release version
        run: mvn -B versions:set -DnewVersion=${RELEASE_VERSION} -DgenerateBackupPoms=false -f parent
        env:
          RELEASE_VERSION: ${{ github.event.inputs.version }}

      - name: Deploy artifacts to Artifactory and Maven Central
        run: mvn -B compile generate-sources source:jar javadoc:jar deploy -PcheckFormat -Psonatype-oss-release
        env:
          NEXUS_USR: ${{ steps.secrets.outputs.ARTIFACTORY_USR }}
          NEXUS_PSW: ${{ steps.secrets.outputs.ARTIFACTORY_PSW }}
          MAVEN_USR: ${{ steps.secrets.outputs.MAVEN_CENTRAL_DEPLOYMENT_USR }}
          MAVEN_PSW: ${{ steps.secrets.outputs.MAVEN_CENTRAL_DEPLOYMENT_PSW }}
          MAVEN_GPG_PASSPHRASE: ${{ steps.secrets.outputs.MAVEN_CENTRAL_GPG_SIGNING_KEY_PASSPHRASE }}

      - name: Commit and tag
        run: |
          git commit -am "ci: release version ${RELEASE_VERSION}"
          git tag -a ${RELEASE_VERSION} -m "ci: release version ${RELEASE_VERSION}"
          git push origin ${RELEASE_VERSION}
        env:
          RELEASE_VERSION: ${{ github.event.inputs.version }}

      - name: Set next development patch version
        if: github.event.inputs.prerelease == 'false'
        run: |
          mvn -B build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion}-SNAPSHOT -DgenerateBackupPoms=false -f parent
          git commit -am "ci: set next development version"
          git push

      - name: "Build Changelog"
        id: changelog
        uses: Requarks/changelog-action@v1
        with:
          token: ${{ github.token }}
          tag: ${{ github.event.inputs.version }}
          writeToFile: false
          excludeTypes: build,docs,other,style,ci

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body: ${{ steps.changelog.outputs.changes }}
          tag_name: ${{ github.event.inputs.version }}
          target_commitish: ${{ needs.prepare.outputs.branch }}
          prerelease: ${{ github.event.inputs.prerelease }}
          files: |
            **/THIRD_PARTY_NOTICES

  next-version:
    name: Set next version on main branch
    runs-on: ubuntu-latest
    needs: [ prepare, release-and-deploy ]
    if: github.ref == 'refs/heads/main' && github.event.inputs.prerelease == 'false'
    steps:
      - uses: actions/checkout@v3

      - name: Prepare Java and Maven settings
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Set next development version
        run: mvn -B build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.nextMinorVersion}.0-SNAPSHOT -DgenerateBackupPoms=false -f parent          

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v4
        with:
          branch: bump-to-next-minor
          delete-branch: true
          commit-message: 'ci: set next development version'
          author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
          assignees: ${{ github.actor }}
          title: 'ci: set next development version'
          body: Bump the minor version of the main branch after release ${{ github.event.inputs.version }}
